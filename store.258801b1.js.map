{"version":3,"sources":["node_modules/symbol-observable/es/ponyfill.js","node_modules/symbol-observable/es/index.js","node_modules/redux/es/redux.js","modules/count.js","modules/score.js","modules/message.js","modules/probability.js","modules/index.js","node_modules/redux-devtools-extension/index.js","js/countButton.js","js/startButton.js","js/shootButton.js","js/compareScore.js","store.js"],"names":["symbolObservablePonyfill","root","result","Symbol","observable","self","window","global","module","Function","randomString","Math","random","toString","substring","split","join","ActionTypes","INIT","REPLACE","PROBE_UNKNOWN_ACTION","isPlainObject","obj","Object","proto","getPrototypeOf","createStore","reducer","preloadedState","enhancer","_ref2","arguments","Error","undefined","currentReducer","currentState","currentListeners","nextListeners","isDispatching","ensureCanMutateNextListeners","slice","getState","subscribe","listener","isSubscribed","push","index","indexOf","splice","dispatch","action","type","listeners","i","length","replaceReducer","nextReducer","$$observable","_ref","outerSubscribe","observer","TypeError","observeState","next","unsubscribe","warning","message","console","error","e","getUndefinedStateErrorMessage","key","actionType","String","getUnexpectedStateShapeWarningMessage","inputState","reducers","unexpectedKeyCache","reducerKeys","keys","argumentName","call","match","unexpectedKeys","filter","hasOwnProperty","forEach","assertReducerShape","combineReducers","finalReducers","finalReducerKeys","shapeAssertionError","state","warningMessage","hasChanged","nextState","_i","_key","previousStateForKey","nextStateForKey","errorMessage","bindActionCreator","actionCreator","apply","bindActionCreators","actionCreators","boundActionCreators","_defineProperty","value","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","getOwnPropertySymbols","sym","getOwnPropertyDescriptor","_objectSpread2","target","source","getOwnPropertyDescriptors","defineProperties","compose","_len","funcs","Array","arg","reduce","a","b","applyMiddleware","middlewares","store","_dispatch","middlewareAPI","chain","map","middleware","isCrushed","countReducer","COUNT10","COUNT20","COUNT30","REMAIN_COUNT","count10","selectedCount","currentCount","count20","count30","remainCount","initialState","selected","newState","assign","scoreReducer","COM_SCORE3","COM_SCORE2","USER_SCORE2","USER_SCORE3","comSCORE3","comSCORE2","userSCORE2","userSCORE3","userScore","comScore","messageReducer","START","COM","USER","ERROR","SUCCESS2","SUCCESS3","FAIL2","FAIL3","start","initialCount","text","turn","com","user","success2","success3","fail2","fail3","resultText","probabilityReducer","SUCCESS_OR_FALSE2","SUCCESS_OR_FALSE3","successOrfalse2","probability","Number","toFixed","successOrfalse3","ShootType","rootReducer","setCountButton","countButtons","document","querySelectorAll","resultMessage","querySelector","onclick","style","visibility","setStartButton","startBtn","setShootButton","comShootBtn","userShootBtn2","userShootBtn3","event","TARGET","preventDefault","compareScore","stateMessage","textContent","showCount","scoreCom","scoreUser","render","classList","add","remove"],"mappings":"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","file":"store.258801b1.js","sourceRoot":"..","sourcesContent":["export default function symbolObservablePonyfill(root) {\r\n\tvar result;\r\n\tvar Symbol = root.Symbol;\r\n\r\n\tif (typeof Symbol === 'function') {\r\n\t\tif (Symbol.observable) {\r\n\t\t\tresult = Symbol.observable;\r\n\t\t} else {\r\n\t\t\tresult = Symbol('observable');\r\n\t\t\tSymbol.observable = result;\r\n\t\t}\r\n\t} else {\r\n\t\tresult = '@@observable';\r\n\t}\r\n\r\n\treturn result;\r\n};\r\n","/* global window */\r\nimport ponyfill from './ponyfill.js';\r\n\r\nvar root;\r\n\r\nif (typeof self !== 'undefined') {\r\n  root = self;\r\n} else if (typeof window !== 'undefined') {\r\n  root = window;\r\n} else if (typeof global !== 'undefined') {\r\n  root = global;\r\n} else if (typeof module !== 'undefined') {\r\n  root = module;\r\n} else {\r\n  root = Function('return this')();\r\n}\r\n\r\nvar result = ponyfill(root);\r\nexport default result;\r\n","import $$observable from 'symbol-observable';\r\n\r\n/**\r\n * These are private action types reserved by Redux.\r\n * For any unknown actions, you must return the current state.\r\n * If the current state is undefined, you must return the initial state.\r\n * Do not reference these action types directly in your code.\r\n */\r\nvar randomString = function randomString() {\r\n  return Math.random().toString(36).substring(7).split('').join('.');\r\n};\r\n\r\nvar ActionTypes = {\r\n  INIT: \"@@redux/INIT\" + randomString(),\r\n  REPLACE: \"@@redux/REPLACE\" + randomString(),\r\n  PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {\r\n    return \"@@redux/PROBE_UNKNOWN_ACTION\" + randomString();\r\n  }\r\n};\r\n\r\n/**\r\n * @param {any} obj The object to inspect.\r\n * @returns {boolean} True if the argument appears to be a plain object.\r\n */\r\nfunction isPlainObject(obj) {\r\n  if (typeof obj !== 'object' || obj === null) return false;\r\n  var proto = obj;\r\n\r\n  while (Object.getPrototypeOf(proto) !== null) {\r\n    proto = Object.getPrototypeOf(proto);\r\n  }\r\n\r\n  return Object.getPrototypeOf(obj) === proto;\r\n}\r\n\r\n/**\r\n * Creates a Redux store that holds the state tree.\r\n * The only way to change the data in the store is to call `dispatch()` on it.\r\n *\r\n * There should only be a single store in your app. To specify how different\r\n * parts of the state tree respond to actions, you may combine several reducers\r\n * into a single reducer function by using `combineReducers`.\r\n *\r\n * @param {Function} reducer A function that returns the next state tree, given\r\n * the current state tree and the action to handle.\r\n *\r\n * @param {any} [preloadedState] The initial state. You may optionally specify it\r\n * to hydrate the state from the server in universal apps, or to restore a\r\n * previously serialized user session.\r\n * If you use `combineReducers` to produce the root reducer function, this must be\r\n * an object with the same shape as `combineReducers` keys.\r\n *\r\n * @param {Function} [enhancer] The store enhancer. You may optionally specify it\r\n * to enhance the store with third-party capabilities such as middleware,\r\n * time travel, persistence, etc. The only store enhancer that ships with Redux\r\n * is `applyMiddleware()`.\r\n *\r\n * @returns {Store} A Redux store that lets you read the state, dispatch actions\r\n * and subscribe to changes.\r\n */\r\n\r\nfunction createStore(reducer, preloadedState, enhancer) {\r\n  var _ref2;\r\n\r\n  if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {\r\n    throw new Error('It looks like you are passing several store enhancers to ' + 'createStore(). This is not supported. Instead, compose them ' + 'together to a single function.');\r\n  }\r\n\r\n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\r\n    enhancer = preloadedState;\r\n    preloadedState = undefined;\r\n  }\r\n\r\n  if (typeof enhancer !== 'undefined') {\r\n    if (typeof enhancer !== 'function') {\r\n      throw new Error('Expected the enhancer to be a function.');\r\n    }\r\n\r\n    return enhancer(createStore)(reducer, preloadedState);\r\n  }\r\n\r\n  if (typeof reducer !== 'function') {\r\n    throw new Error('Expected the reducer to be a function.');\r\n  }\r\n\r\n  var currentReducer = reducer;\r\n  var currentState = preloadedState;\r\n  var currentListeners = [];\r\n  var nextListeners = currentListeners;\r\n  var isDispatching = false;\r\n  /**\r\n   * This makes a shallow copy of currentListeners so we can use\r\n   * nextListeners as a temporary list while dispatching.\r\n   *\r\n   * This prevents any bugs around consumers calling\r\n   * subscribe/unsubscribe in the middle of a dispatch.\r\n   */\r\n\r\n  function ensureCanMutateNextListeners() {\r\n    if (nextListeners === currentListeners) {\r\n      nextListeners = currentListeners.slice();\r\n    }\r\n  }\r\n  /**\r\n   * Reads the state tree managed by the store.\r\n   *\r\n   * @returns {any} The current state tree of your application.\r\n   */\r\n\r\n\r\n  function getState() {\r\n    if (isDispatching) {\r\n      throw new Error('You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');\r\n    }\r\n\r\n    return currentState;\r\n  }\r\n  /**\r\n   * Adds a change listener. It will be called any time an action is dispatched,\r\n   * and some part of the state tree may potentially have changed. You may then\r\n   * call `getState()` to read the current state tree inside the callback.\r\n   *\r\n   * You may call `dispatch()` from a change listener, with the following\r\n   * caveats:\r\n   *\r\n   * 1. The subscriptions are snapshotted just before every `dispatch()` call.\r\n   * If you subscribe or unsubscribe while the listeners are being invoked, this\r\n   * will not have any effect on the `dispatch()` that is currently in progress.\r\n   * However, the next `dispatch()` call, whether nested or not, will use a more\r\n   * recent snapshot of the subscription list.\r\n   *\r\n   * 2. The listener should not expect to see all state changes, as the state\r\n   * might have been updated multiple times during a nested `dispatch()` before\r\n   * the listener is called. It is, however, guaranteed that all subscribers\r\n   * registered before the `dispatch()` started will be called with the latest\r\n   * state by the time it exits.\r\n   *\r\n   * @param {Function} listener A callback to be invoked on every dispatch.\r\n   * @returns {Function} A function to remove this change listener.\r\n   */\r\n\r\n\r\n  function subscribe(listener) {\r\n    if (typeof listener !== 'function') {\r\n      throw new Error('Expected the listener to be a function.');\r\n    }\r\n\r\n    if (isDispatching) {\r\n      throw new Error('You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api-reference/store#subscribelistener for more details.');\r\n    }\r\n\r\n    var isSubscribed = true;\r\n    ensureCanMutateNextListeners();\r\n    nextListeners.push(listener);\r\n    return function unsubscribe() {\r\n      if (!isSubscribed) {\r\n        return;\r\n      }\r\n\r\n      if (isDispatching) {\r\n        throw new Error('You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api-reference/store#subscribelistener for more details.');\r\n      }\r\n\r\n      isSubscribed = false;\r\n      ensureCanMutateNextListeners();\r\n      var index = nextListeners.indexOf(listener);\r\n      nextListeners.splice(index, 1);\r\n      currentListeners = null;\r\n    };\r\n  }\r\n  /**\r\n   * Dispatches an action. It is the only way to trigger a state change.\r\n   *\r\n   * The `reducer` function, used to create the store, will be called with the\r\n   * current state tree and the given `action`. Its return value will\r\n   * be considered the **next** state of the tree, and the change listeners\r\n   * will be notified.\r\n   *\r\n   * The base implementation only supports plain object actions. If you want to\r\n   * dispatch a Promise, an Observable, a thunk, or something else, you need to\r\n   * wrap your store creating function into the corresponding middleware. For\r\n   * example, see the documentation for the `redux-thunk` package. Even the\r\n   * middleware will eventually dispatch plain object actions using this method.\r\n   *\r\n   * @param {Object} action A plain object representing “what changed”. It is\r\n   * a good idea to keep actions serializable so you can record and replay user\r\n   * sessions, or use the time travelling `redux-devtools`. An action must have\r\n   * a `type` property which may not be `undefined`. It is a good idea to use\r\n   * string constants for action types.\r\n   *\r\n   * @returns {Object} For convenience, the same action object you dispatched.\r\n   *\r\n   * Note that, if you use a custom middleware, it may wrap `dispatch()` to\r\n   * return something else (for example, a Promise you can await).\r\n   */\r\n\r\n\r\n  function dispatch(action) {\r\n    if (!isPlainObject(action)) {\r\n      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');\r\n    }\r\n\r\n    if (typeof action.type === 'undefined') {\r\n      throw new Error('Actions may not have an undefined \"type\" property. ' + 'Have you misspelled a constant?');\r\n    }\r\n\r\n    if (isDispatching) {\r\n      throw new Error('Reducers may not dispatch actions.');\r\n    }\r\n\r\n    try {\r\n      isDispatching = true;\r\n      currentState = currentReducer(currentState, action);\r\n    } finally {\r\n      isDispatching = false;\r\n    }\r\n\r\n    var listeners = currentListeners = nextListeners;\r\n\r\n    for (var i = 0; i < listeners.length; i++) {\r\n      var listener = listeners[i];\r\n      listener();\r\n    }\r\n\r\n    return action;\r\n  }\r\n  /**\r\n   * Replaces the reducer currently used by the store to calculate the state.\r\n   *\r\n   * You might need this if your app implements code splitting and you want to\r\n   * load some of the reducers dynamically. You might also need this if you\r\n   * implement a hot reloading mechanism for Redux.\r\n   *\r\n   * @param {Function} nextReducer The reducer for the store to use instead.\r\n   * @returns {void}\r\n   */\r\n\r\n\r\n  function replaceReducer(nextReducer) {\r\n    if (typeof nextReducer !== 'function') {\r\n      throw new Error('Expected the nextReducer to be a function.');\r\n    }\r\n\r\n    currentReducer = nextReducer; // This action has a similiar effect to ActionTypes.INIT.\r\n    // Any reducers that existed in both the new and old rootReducer\r\n    // will receive the previous state. This effectively populates\r\n    // the new state tree with any relevant data from the old one.\r\n\r\n    dispatch({\r\n      type: ActionTypes.REPLACE\r\n    });\r\n  }\r\n  /**\r\n   * Interoperability point for observable/reactive libraries.\r\n   * @returns {observable} A minimal observable of state changes.\r\n   * For more information, see the observable proposal:\r\n   * https://github.com/tc39/proposal-observable\r\n   */\r\n\r\n\r\n  function observable() {\r\n    var _ref;\r\n\r\n    var outerSubscribe = subscribe;\r\n    return _ref = {\r\n      /**\r\n       * The minimal observable subscription method.\r\n       * @param {Object} observer Any object that can be used as an observer.\r\n       * The observer object should have a `next` method.\r\n       * @returns {subscription} An object with an `unsubscribe` method that can\r\n       * be used to unsubscribe the observable from the store, and prevent further\r\n       * emission of values from the observable.\r\n       */\r\n      subscribe: function subscribe(observer) {\r\n        if (typeof observer !== 'object' || observer === null) {\r\n          throw new TypeError('Expected the observer to be an object.');\r\n        }\r\n\r\n        function observeState() {\r\n          if (observer.next) {\r\n            observer.next(getState());\r\n          }\r\n        }\r\n\r\n        observeState();\r\n        var unsubscribe = outerSubscribe(observeState);\r\n        return {\r\n          unsubscribe: unsubscribe\r\n        };\r\n      }\r\n    }, _ref[$$observable] = function () {\r\n      return this;\r\n    }, _ref;\r\n  } // When a store is created, an \"INIT\" action is dispatched so that every\r\n  // reducer returns their initial state. This effectively populates\r\n  // the initial state tree.\r\n\r\n\r\n  dispatch({\r\n    type: ActionTypes.INIT\r\n  });\r\n  return _ref2 = {\r\n    dispatch: dispatch,\r\n    subscribe: subscribe,\r\n    getState: getState,\r\n    replaceReducer: replaceReducer\r\n  }, _ref2[$$observable] = observable, _ref2;\r\n}\r\n\r\n/**\r\n * Prints a warning in the console if it exists.\r\n *\r\n * @param {String} message The warning message.\r\n * @returns {void}\r\n */\r\nfunction warning(message) {\r\n  /* eslint-disable no-console */\r\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\r\n    console.error(message);\r\n  }\r\n  /* eslint-enable no-console */\r\n\r\n\r\n  try {\r\n    // This error was thrown as a convenience so that if you enable\r\n    // \"break on all exceptions\" in your console,\r\n    // it would pause the execution at this line.\r\n    throw new Error(message);\r\n  } catch (e) {} // eslint-disable-line no-empty\r\n\r\n}\r\n\r\nfunction getUndefinedStateErrorMessage(key, action) {\r\n  var actionType = action && action.type;\r\n  var actionDescription = actionType && \"action \\\"\" + String(actionType) + \"\\\"\" || 'an action';\r\n  return \"Given \" + actionDescription + \", reducer \\\"\" + key + \"\\\" returned undefined. \" + \"To ignore an action, you must explicitly return the previous state. \" + \"If you want this reducer to hold no value, you can return null instead of undefined.\";\r\n}\r\n\r\nfunction getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {\r\n  var reducerKeys = Object.keys(reducers);\r\n  var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';\r\n\r\n  if (reducerKeys.length === 0) {\r\n    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';\r\n  }\r\n\r\n  if (!isPlainObject(inputState)) {\r\n    return \"The \" + argumentName + \" has unexpected type of \\\"\" + {}.toString.call(inputState).match(/\\s([a-z|A-Z]+)/)[1] + \"\\\". Expected argument to be an object with the following \" + (\"keys: \\\"\" + reducerKeys.join('\", \"') + \"\\\"\");\r\n  }\r\n\r\n  var unexpectedKeys = Object.keys(inputState).filter(function (key) {\r\n    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];\r\n  });\r\n  unexpectedKeys.forEach(function (key) {\r\n    unexpectedKeyCache[key] = true;\r\n  });\r\n  if (action && action.type === ActionTypes.REPLACE) return;\r\n\r\n  if (unexpectedKeys.length > 0) {\r\n    return \"Unexpected \" + (unexpectedKeys.length > 1 ? 'keys' : 'key') + \" \" + (\"\\\"\" + unexpectedKeys.join('\", \"') + \"\\\" found in \" + argumentName + \". \") + \"Expected to find one of the known reducer keys instead: \" + (\"\\\"\" + reducerKeys.join('\", \"') + \"\\\". Unexpected keys will be ignored.\");\r\n  }\r\n}\r\n\r\nfunction assertReducerShape(reducers) {\r\n  Object.keys(reducers).forEach(function (key) {\r\n    var reducer = reducers[key];\r\n    var initialState = reducer(undefined, {\r\n      type: ActionTypes.INIT\r\n    });\r\n\r\n    if (typeof initialState === 'undefined') {\r\n      throw new Error(\"Reducer \\\"\" + key + \"\\\" returned undefined during initialization. \" + \"If the state passed to the reducer is undefined, you must \" + \"explicitly return the initial state. The initial state may \" + \"not be undefined. If you don't want to set a value for this reducer, \" + \"you can use null instead of undefined.\");\r\n    }\r\n\r\n    if (typeof reducer(undefined, {\r\n      type: ActionTypes.PROBE_UNKNOWN_ACTION()\r\n    }) === 'undefined') {\r\n      throw new Error(\"Reducer \\\"\" + key + \"\\\" returned undefined when probed with a random type. \" + (\"Don't try to handle \" + ActionTypes.INIT + \" or other actions in \\\"redux/*\\\" \") + \"namespace. They are considered private. Instead, you must return the \" + \"current state for any unknown actions, unless it is undefined, \" + \"in which case you must return the initial state, regardless of the \" + \"action type. The initial state may not be undefined, but can be null.\");\r\n    }\r\n  });\r\n}\r\n/**\r\n * Turns an object whose values are different reducer functions, into a single\r\n * reducer function. It will call every child reducer, and gather their results\r\n * into a single state object, whose keys correspond to the keys of the passed\r\n * reducer functions.\r\n *\r\n * @param {Object} reducers An object whose values correspond to different\r\n * reducer functions that need to be combined into one. One handy way to obtain\r\n * it is to use ES6 `import * as reducers` syntax. The reducers may never return\r\n * undefined for any action. Instead, they should return their initial state\r\n * if the state passed to them was undefined, and the current state for any\r\n * unrecognized action.\r\n *\r\n * @returns {Function} A reducer function that invokes every reducer inside the\r\n * passed object, and builds a state object with the same shape.\r\n */\r\n\r\n\r\nfunction combineReducers(reducers) {\r\n  var reducerKeys = Object.keys(reducers);\r\n  var finalReducers = {};\r\n\r\n  for (var i = 0; i < reducerKeys.length; i++) {\r\n    var key = reducerKeys[i];\r\n\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      if (typeof reducers[key] === 'undefined') {\r\n        warning(\"No reducer provided for key \\\"\" + key + \"\\\"\");\r\n      }\r\n    }\r\n\r\n    if (typeof reducers[key] === 'function') {\r\n      finalReducers[key] = reducers[key];\r\n    }\r\n  }\r\n\r\n  var finalReducerKeys = Object.keys(finalReducers); // This is used to make sure we don't warn about the same\r\n  // keys multiple times.\r\n\r\n  var unexpectedKeyCache;\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    unexpectedKeyCache = {};\r\n  }\r\n\r\n  var shapeAssertionError;\r\n\r\n  try {\r\n    assertReducerShape(finalReducers);\r\n  } catch (e) {\r\n    shapeAssertionError = e;\r\n  }\r\n\r\n  return function combination(state, action) {\r\n    if (state === void 0) {\r\n      state = {};\r\n    }\r\n\r\n    if (shapeAssertionError) {\r\n      throw shapeAssertionError;\r\n    }\r\n\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);\r\n\r\n      if (warningMessage) {\r\n        warning(warningMessage);\r\n      }\r\n    }\r\n\r\n    var hasChanged = false;\r\n    var nextState = {};\r\n\r\n    for (var _i = 0; _i < finalReducerKeys.length; _i++) {\r\n      var _key = finalReducerKeys[_i];\r\n      var reducer = finalReducers[_key];\r\n      var previousStateForKey = state[_key];\r\n      var nextStateForKey = reducer(previousStateForKey, action);\r\n\r\n      if (typeof nextStateForKey === 'undefined') {\r\n        var errorMessage = getUndefinedStateErrorMessage(_key, action);\r\n        throw new Error(errorMessage);\r\n      }\r\n\r\n      nextState[_key] = nextStateForKey;\r\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\r\n    }\r\n\r\n    hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;\r\n    return hasChanged ? nextState : state;\r\n  };\r\n}\r\n\r\nfunction bindActionCreator(actionCreator, dispatch) {\r\n  return function () {\r\n    return dispatch(actionCreator.apply(this, arguments));\r\n  };\r\n}\r\n/**\r\n * Turns an object whose values are action creators, into an object with the\r\n * same keys, but with every function wrapped into a `dispatch` call so they\r\n * may be invoked directly. This is just a convenience method, as you can call\r\n * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.\r\n *\r\n * For convenience, you can also pass an action creator as the first argument,\r\n * and get a dispatch wrapped function in return.\r\n *\r\n * @param {Function|Object} actionCreators An object whose values are action\r\n * creator functions. One handy way to obtain it is to use ES6 `import * as`\r\n * syntax. You may also pass a single function.\r\n *\r\n * @param {Function} dispatch The `dispatch` function available on your Redux\r\n * store.\r\n *\r\n * @returns {Function|Object} The object mimicking the original object, but with\r\n * every action creator wrapped into the `dispatch` call. If you passed a\r\n * function as `actionCreators`, the return value will also be a single\r\n * function.\r\n */\r\n\r\n\r\nfunction bindActionCreators(actionCreators, dispatch) {\r\n  if (typeof actionCreators === 'function') {\r\n    return bindActionCreator(actionCreators, dispatch);\r\n  }\r\n\r\n  if (typeof actionCreators !== 'object' || actionCreators === null) {\r\n    throw new Error(\"bindActionCreators expected an object or a function, instead received \" + (actionCreators === null ? 'null' : typeof actionCreators) + \". \" + \"Did you write \\\"import ActionCreators from\\\" instead of \\\"import * as ActionCreators from\\\"?\");\r\n  }\r\n\r\n  var boundActionCreators = {};\r\n\r\n  for (var key in actionCreators) {\r\n    var actionCreator = actionCreators[key];\r\n\r\n    if (typeof actionCreator === 'function') {\r\n      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);\r\n    }\r\n  }\r\n\r\n  return boundActionCreators;\r\n}\r\n\r\nfunction _defineProperty(obj, key, value) {\r\n  if (key in obj) {\r\n    Object.defineProperty(obj, key, {\r\n      value: value,\r\n      enumerable: true,\r\n      configurable: true,\r\n      writable: true\r\n    });\r\n  } else {\r\n    obj[key] = value;\r\n  }\r\n\r\n  return obj;\r\n}\r\n\r\nfunction ownKeys(object, enumerableOnly) {\r\n  var keys = Object.keys(object);\r\n\r\n  if (Object.getOwnPropertySymbols) {\r\n    keys.push.apply(keys, Object.getOwnPropertySymbols(object));\r\n  }\r\n\r\n  if (enumerableOnly) keys = keys.filter(function (sym) {\r\n    return Object.getOwnPropertyDescriptor(object, sym).enumerable;\r\n  });\r\n  return keys;\r\n}\r\n\r\nfunction _objectSpread2(target) {\r\n  for (var i = 1; i < arguments.length; i++) {\r\n    var source = arguments[i] != null ? arguments[i] : {};\r\n\r\n    if (i % 2) {\r\n      ownKeys(source, true).forEach(function (key) {\r\n        _defineProperty(target, key, source[key]);\r\n      });\r\n    } else if (Object.getOwnPropertyDescriptors) {\r\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\r\n    } else {\r\n      ownKeys(source).forEach(function (key) {\r\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\r\n      });\r\n    }\r\n  }\r\n\r\n  return target;\r\n}\r\n\r\n/**\r\n * Composes single-argument functions from right to left. The rightmost\r\n * function can take multiple arguments as it provides the signature for\r\n * the resulting composite function.\r\n *\r\n * @param {...Function} funcs The functions to compose.\r\n * @returns {Function} A function obtained by composing the argument functions\r\n * from right to left. For example, compose(f, g, h) is identical to doing\r\n * (...args) => f(g(h(...args))).\r\n */\r\nfunction compose() {\r\n  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {\r\n    funcs[_key] = arguments[_key];\r\n  }\r\n\r\n  if (funcs.length === 0) {\r\n    return function (arg) {\r\n      return arg;\r\n    };\r\n  }\r\n\r\n  if (funcs.length === 1) {\r\n    return funcs[0];\r\n  }\r\n\r\n  return funcs.reduce(function (a, b) {\r\n    return function () {\r\n      return a(b.apply(void 0, arguments));\r\n    };\r\n  });\r\n}\r\n\r\n/**\r\n * Creates a store enhancer that applies middleware to the dispatch method\r\n * of the Redux store. This is handy for a variety of tasks, such as expressing\r\n * asynchronous actions in a concise manner, or logging every action payload.\r\n *\r\n * See `redux-thunk` package as an example of the Redux middleware.\r\n *\r\n * Because middleware is potentially asynchronous, this should be the first\r\n * store enhancer in the composition chain.\r\n *\r\n * Note that each middleware will be given the `dispatch` and `getState` functions\r\n * as named arguments.\r\n *\r\n * @param {...Function} middlewares The middleware chain to be applied.\r\n * @returns {Function} A store enhancer applying the middleware.\r\n */\r\n\r\nfunction applyMiddleware() {\r\n  for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {\r\n    middlewares[_key] = arguments[_key];\r\n  }\r\n\r\n  return function (createStore) {\r\n    return function () {\r\n      var store = createStore.apply(void 0, arguments);\r\n\r\n      var _dispatch = function dispatch() {\r\n        throw new Error('Dispatching while constructing your middleware is not allowed. ' + 'Other middleware would not be applied to this dispatch.');\r\n      };\r\n\r\n      var middlewareAPI = {\r\n        getState: store.getState,\r\n        dispatch: function dispatch() {\r\n          return _dispatch.apply(void 0, arguments);\r\n        }\r\n      };\r\n      var chain = middlewares.map(function (middleware) {\r\n        return middleware(middlewareAPI);\r\n      });\r\n      _dispatch = compose.apply(void 0, chain)(store.dispatch);\r\n      return _objectSpread2({}, store, {\r\n        dispatch: _dispatch\r\n      });\r\n    };\r\n  };\r\n}\r\n\r\n/*\r\n * This is a dummy function to check if the function name has been altered by minification.\r\n * If the function has been minified and NODE_ENV !== 'production', warn the user.\r\n */\r\n\r\nfunction isCrushed() {}\r\n\r\nif (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {\r\n  warning('You are currently using minified code outside of NODE_ENV === \"production\". ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) ' + 'to ensure you have the correct code for your production build.');\r\n}\r\n\r\nexport { ActionTypes as __DO_NOT_USE__ActionTypes, applyMiddleware, bindActionCreators, combineReducers, compose, createStore };\r\n","// 액션명 생성\r\nconst COUNT10 = 'count/COUNT10';\r\nconst COUNT20 = 'count/COUNT20';    \r\nconst COUNT30 = 'count/COUNT30';    \r\nconst REMAIN_COUNT = 'count/REMAIN_COUNT';\r\n\r\n//액션생성함수\r\nexport const count10 = () => ({type: COUNT10, selectedCount: 10, currentCount: 10});\r\nexport const count20 = () => ({type: COUNT20, selectedCount: 20, currentCount: 20});\r\nexport const count30 = () => ({type: COUNT30, selectedCount: 30, currentCount: 30});\r\nexport const remainCount = () => ({type: REMAIN_COUNT});\r\n\r\n//초기값 생성\r\nconst initialState = {\r\n    selected : false, \r\n    selectedCount: null,\r\n    currentCount: null,\r\n};\r\n\r\n//리듀서 함수 생성\r\nfunction countReducer(state=initialState, action) {\r\n    let newState;\r\n    switch(action.type) {\r\n        case COUNT10:\r\n            newState = Object.assign(\r\n                {}, \r\n                state, \r\n                {selected: true, selectedCount: action.selectedCount, currentCount: action.currentCount}\r\n            );\r\n            break;\r\n        case COUNT20:\r\n            newState = Object.assign(\r\n                {}, \r\n                state, \r\n                {selected: true, selectedCount: action.selectedCount, currentCount: action.currentCount}\r\n            );\r\n            break;\r\n        case COUNT30:\r\n            newState = Object.assign(\r\n                {}, \r\n                state, \r\n                {selected: true, selectedCount: action.selectedCount, currentCount: action.currentCount}\r\n            );\r\n            break;\r\n        case REMAIN_COUNT:\r\n            newState = Object.assign(\r\n                {}, \r\n                state, \r\n                {currentCount: state.currentCount - 1 }\r\n            );\r\n            break;\r\n        default:\r\n            return state;\r\n    }\r\n    return newState;\r\n};\r\n\r\nexport default countReducer;","// 액션명 생성\r\nconst COM_SCORE3 = 'com/SCORE3';\r\nconst COM_SCORE2 = 'com/SCORE2';\r\nconst USER_SCORE2 = 'user/SCORE2';\r\nconst USER_SCORE3 = 'user/SCORE3';\r\n\r\n// 액션생성함수\r\nexport const comSCORE3 = () => ({\r\n    type : COM_SCORE3\r\n});\r\nexport const comSCORE2 = () => ({\r\n    type : COM_SCORE2\r\n});\r\nexport const userSCORE2 = () => ({\r\n    type : USER_SCORE2\r\n});\r\nexport const userSCORE3 = () => ({\r\n    type : USER_SCORE3\r\n});\r\n\r\n//초기값 생성\r\nconst initialState = {\r\n    userScore : 0,\r\n    comScore : 0\r\n};\r\n\r\n\r\n//리듀서 생성\r\nfunction scoreReducer(state=initialState, action) {\r\n    let newState;\r\n    switch(action.type) {\r\n        case COM_SCORE2:\r\n            newState = Object.assign(\r\n                {},\r\n                state,\r\n                {comScore: state.comScore + 2})\r\n            ;\r\n            break;\r\n        case COM_SCORE3 :\r\n            newState = Object.assign(\r\n                {},\r\n                state,\r\n                {comScore: state.comScore + 3})\r\n            ;\r\n            break;\r\n        case USER_SCORE2 :\r\n            newState = Object.assign(\r\n                {},\r\n                state,\r\n                {userScore: state.userScore + 2}\r\n            );\r\n            break;\r\n        case USER_SCORE3 :\r\n            newState = Object.assign(\r\n                {},\r\n                state,\r\n                {userScore: state.userScore + 3}\r\n            );\r\n            break;\r\n        default:\r\n            return state;\r\n    }\r\n    return newState;\r\n};\r\n\r\nexport default scoreReducer;","//액션명 생성\r\nconst START = 'stateMessage/START';\r\nconst COM = 'stateMessage/COM';\r\nconst USER = 'stateMessage/USER';\r\nconst ERROR = 'stateMessage/ERROR';\r\nconst SUCCESS2 = 'resultMessage/SUCCESS2';\r\nconst SUCCESS3 = 'resultMessage/SUCCESS3';\r\nconst FAIL2 = 'resultMessage/FAIL2';\r\nconst FAIL3 = 'resultMessage/FAIL3';\r\n\r\n//액션정의함수 생성\r\nexport const start = (initialCount) => ({\r\n    type: START, \r\n    text:'com 먼저 시작합니다.', \r\n    turn: 'com',\r\n    currentCount: initialCount\r\n});\r\nexport const com = () => ({\r\n    type: COM, \r\n    text: 'com 차례 입니다.',\r\n    turn: 'com'\r\n});\r\nexport const user = () => ({\r\n    type: USER, \r\n    text:'user 님 차례입니다.',\r\n    turn: 'user' \r\n});\r\nexport const error = () => ({\r\n    type: ERROR, \r\n    text:'게임 카운트를 먼저 선택해주세요!'  \r\n});\r\nexport const success2 = (target) => ({\r\n    type: SUCCESS2,\r\n    text: `${target}, 2점슛 성공!!`\r\n});\r\nexport const success3 = (target) => ({\r\n    type: SUCCESS3,\r\n    text: `${target}, 3점슛 성공!!!!`,\r\n});\r\nexport const fail2 = (target) => ({\r\n    type: FAIL2,\r\n    text: `${target},2점슛 실패...`\r\n});\r\nexport const fail3 = (target) => ({\r\n    type: FAIL3,\r\n    text: `${target}, 3점슛 실패...`\r\n});\r\n\r\n//초기값 생성\r\nconst initialState = {\r\n    turn: null,\r\n    resultText: '',\r\n    text: '상단에 카운트를 설정하신 후 Start 버튼을 눌러주세요' \r\n};\r\n\r\n//리듀서 함수 생성\r\nfunction messageReducer(state=initialState, action) {\r\n    let newState;\r\n    switch(action.type) {\r\n        case START: \r\n            newState = Object.assign(\r\n                {},\r\n                state,\r\n                {text: action.text, currentCount: state.selectedCount, turn: action.turn}\r\n            );\r\n            break;\r\n        case COM: \r\n            newState = Object.assign(\r\n                {},\r\n                state,\r\n                {text: action.text,  turn: action.turn}\r\n            );\r\n            break;\r\n        case USER: \r\n            newState = Object.assign(\r\n                {},\r\n                state,\r\n                {text: action.text,  turn: action.turn}\r\n            );\r\n            break;\r\n        case ERROR: \r\n            newState = Object.assign(\r\n                {},\r\n                state,\r\n                {text: action.text}\r\n            );\r\n            break;\r\n        case SUCCESS2: \r\n            newState = Object.assign(\r\n                {},\r\n                state,\r\n                {resultText: action.text}\r\n            );\r\n            break;\r\n        case SUCCESS3: \r\n            newState = Object.assign(\r\n                {},\r\n                state,\r\n                {resultText: action.text}\r\n            );\r\n            break;\r\n        case FAIL2: \r\n        // return {...state,text : action.text};\r\n            newState = Object.assign(\r\n                {},\r\n                state,\r\n                {resultText: action.text}\r\n            );\r\n            break;\r\n        case FAIL3: \r\n            newState = Object.assign(\r\n                {},\r\n                state,\r\n                {resultText: action.text}\r\n            );\r\n            break;\r\n        default:\r\n            return state;\r\n    }\r\n    return newState;\r\n};\r\n\r\nexport default messageReducer;","//액션명 정의\r\nconst SUCCESS_OR_FALSE2 = 'success/SUCCESS_OR_FALSE2';\r\nconst SUCCESS_OR_FALSE3 = 'success/SUCCESS_OR_FALSE3';\r\n\r\n\r\n//액션생성함수 생성\r\nexport const successOrfalse2 = () => ({\r\n    type: SUCCESS_OR_FALSE2,\r\n    probability:  Number((Math.random()).toFixed(2))\r\n});\r\nexport const successOrfalse3 = () => ({\r\n    type: SUCCESS_OR_FALSE3,\r\n    probability:  Number((Math.random()).toFixed(2))\r\n});\r\n\r\n//초기값 생성\r\nconst initialState = {\r\n    ShootType: 0,\r\n    probability: 0,\r\n};\r\n\r\n//리듀서 함수 생성\r\nfunction probabilityReducer(state=initialState, action) {\r\n    let newState;\r\n    switch(action.type) {\r\n        case SUCCESS_OR_FALSE2: \r\n            newState = Object.assign(\r\n                {},\r\n                state,\r\n                {probability: action.probability}\r\n            );\r\n            break;\r\n        case SUCCESS_OR_FALSE3: \r\n            newState = Object.assign(\r\n                {},\r\n                state,\r\n                {probability: action.probability}\r\n            );\r\n            break;\r\n        default:\r\n            return state;\r\n    }\r\n    return newState;\r\n};\r\n\r\nexport default probabilityReducer;","//루트 리듀서 모듈\r\nimport {combineReducers} from 'redux';\r\nimport countReducer from './count';\r\nimport scoreReducer from './score';\r\nimport messageReducer from './message';\r\nimport probabilityReducer from './probability';\r\n\r\nconst rootReducer = combineReducers({\r\n    countReducer,\r\n    scoreReducer,\r\n    messageReducer,\r\n    probabilityReducer\r\n});\r\n\r\nexport default rootReducer;","'use strict';\r\n\r\nvar compose = require('redux').compose;\r\n\r\nexports.__esModule = true;\r\nexports.composeWithDevTools =\r\n  typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n    : function () {\r\n        if (arguments.length === 0) return undefined;\r\n        if (typeof arguments[0] === 'object') return compose;\r\n        return compose.apply(null, arguments);\r\n      };\r\n\r\nexports.devToolsEnhancer =\r\n  typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION__\r\n    ? window.__REDUX_DEVTOOLS_EXTENSION__\r\n    : function () {\r\n        return function (noop) {\r\n          return noop;\r\n        };\r\n      };\r\n","import store from '../store';\r\nimport {count10, count20, count30} from '../modules/count';\r\n\r\n//게임 카운트 수 설정 버튼 이벤트 \r\nconst countButtons =  document.querySelectorAll('#countBtn');\r\nconst resultMessage = document.querySelector('#resultMessage');\r\n\r\nconst setCountButton = () => {\r\n    countButtons[0].onclick = () => {\r\n        resultMessage.style.visibility = \"hidden\";\r\n        store.dispatch(count10());\r\n    }\r\n    countButtons[1].onclick = () => {\r\n        resultMessage.style.visibility = \"hidden\";\r\n        store.dispatch(count20());\r\n    }\r\n    countButtons[2].onclick = () => {\r\n        resultMessage.style.visibility = \"hidden\";\r\n        store.dispatch(count30());\r\n    }\r\n}\r\n\r\nexport default setCountButton;\r\n","import store from '../store';\r\nimport {start,error} from '../modules/message';\r\nconst startBtn = document.querySelector('#startBtn');\r\n\r\n\r\n//시작 버튼 이벤트 \r\nconst setStartButton = () => {\r\n    startBtn.onclick = () => {\r\n        const state = store.getState();\r\n        const {countReducer:{selected, selectedCount}} = state; //비구조화 할당\r\n        const initialCount = selectedCount;\r\n        \r\n        selected ? store.dispatch(start(initialCount)) : store.dispatch(error());\r\n    };\r\n}\r\n\r\nexport default setStartButton;","import store from '../store';\r\nimport {com,user,success2,success3,fail2,fail3} from '../modules/message';\r\nimport {remainCount} from '../modules/count';\r\nimport {comSCORE2, comSCORE3, userSCORE2, userSCORE3} from '../modules/score';\r\nimport {successOrfalse2, successOrfalse3} from '../modules/probability';\r\n\r\nconst comShootBtn = document.querySelector('#comShootBtn');\r\nconst userShootBtn2 = document.querySelector('#userShootBtn2');\r\nconst userShootBtn3 = document.querySelector('#userShootBtn3');\r\n\r\n\r\nconst setShootButton = () => {\r\n\r\n    //com 랜덤슛 버튼 이벤트\r\n    comShootBtn.onclick = (event) => {\r\n        const state =store.getState();\r\n        const {messageReducer:{turn}} = state; //비구조화 할당\r\n        const {countReducer:{currentCount}} = state;\r\n        const {probabilityReducer: {probability}} = state;\r\n    \r\n        let TARGET = turn; \r\n        if(currentCount === 0 || TARGET === 'user'  || TARGET === null){\r\n            event.preventDefault();\r\n        }else{\r\n            resultMessage.style.visibility = \"visible\";\r\n            const Probability = Number((Math.random()).toFixed(2));\r\n            \r\n            if(Probability <= 0.75){\r\n                store.dispatch(successOrfalse2());\r\n                if(probability <= 0.85){\r\n                    store.dispatch(success2(TARGET));\r\n                    store.dispatch(comSCORE2())\r\n                }else {\r\n                    store.dispatch(fail2(TARGET));\r\n                }     \r\n            }else{\r\n                store.dispatch(successOrfalse3())\r\n                if(probability <= 0.45){\r\n                    store.dispatch(success3(TARGET));\r\n                    store.dispatch(comSCORE3())\r\n                }else {\r\n                    store.dispatch(fail3(TARGET));\r\n                }\r\n            }\r\n            store.dispatch(user());\r\n            store.dispatch(remainCount());\r\n        }\r\n    };\r\n    \r\n    //사용자의 2점슛 버튼 이벤트\r\n    userShootBtn2.onclick = (event) => {\r\n        const state = store.getState();\r\n        const {messageReducer:{turn}} = state; //비구조화 할당\r\n        const {countReducer:{currentCount}} = state;\r\n        const {probabilityReducer: {probability}} = state;\r\n        \r\n        let TARGET = turn;\r\n        if(currentCount === 0 || TARGET === 'com' || TARGET === null){\r\n            event.preventDefault();\r\n        }else{\r\n            resultMessage.style.visibility = \"visible\";\r\n            store.dispatch(successOrfalse2());\r\n            if(probability <= 0.85){\r\n                store.dispatch(success2(TARGET));\r\n                store.dispatch(userSCORE2())\r\n            }else {\r\n                store.dispatch(fail2(TARGET));\r\n            }\r\n            store.dispatch(com());\r\n            store.dispatch(remainCount());\r\n        }\r\n    };\r\n    \r\n    //사용자의 3점슛 버튼 이벤트\r\n    userShootBtn3.onclick = (event) => {\r\n        const state = store.getState();\r\n        const {messageReducer:{turn}} = state; //비구조화 할당\r\n        const {countReducer:{currentCount}} = state;\r\n        const {probabilityReducer: {probability}} = state;\r\n        \r\n        let TARGET = turn;\r\n        if(currentCount === 0 || TARGET === 'com' || TARGET === null){\r\n            event.preventDefault();\r\n        }else{\r\n            resultMessage.style.visibility = \"visible\";\r\n            store.dispatch(successOrfalse3())\r\n            if(probability <= 0.45){\r\n                store.dispatch(success3(TARGET));\r\n                store.dispatch(userSCORE3())\r\n            }else {\r\n                store.dispatch(fail3(TARGET));\r\n            }\r\n            store.dispatch(com());\r\n            store.dispatch(remainCount());\r\n        }\r\n    };\r\n};\r\n\r\nexport default setShootButton;\r\n\r\n","const stateMessage = document.querySelector('#stateMessage');\r\n\r\nconst compareScore =(state) => {\r\n    const {scoreReducer:{comScore, userScore}} = state;\r\n    if (comScore > userScore){\r\n        stateMessage.textContent = 'com 승리!';\r\n    }else if (comScore < userScore){\r\n        stateMessage.textContent = '유저 승리!';\r\n    }else{ \r\n        stateMessage.textContent = '무승부';\r\n    };\r\n}\r\n\r\nexport default compareScore;","import { createStore } from 'redux';\r\nimport rootReducer from  './modules/index';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport setCountButton from './js/countButton';\r\nimport setStartButton from './js/startButton';\r\nimport setShootButton from './js/shootButton';\r\nimport compareScore from './js/compareScore';\r\nconst showCount = document.querySelector('#countResult');\r\nconst stateMessage = document.querySelector('#stateMessage');\r\nconst resultMessage = document.querySelector('#resultMessage');\r\nconst scoreCom = document.querySelector('.score-com');\r\nconst scoreUser = document.querySelector('.score-user');\r\nconst comShootBtn = document.querySelector('#comShootBtn');\r\nconst userShootBtn2 = document.querySelector('#userShootBtn2');\r\nconst userShootBtn3 = document.querySelector('#userShootBtn3');\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools());\r\n\r\nconst render = () => {\r\n    const state =store.getState();\r\n    const {countReducer:{currentCount}} = state; //비구조화 할당\r\n    const {messageReducer:{text, turn, resultText}} = state;\r\n    const {scoreReducer:{userScore, comScore}} = state;\r\n    if(currentCount > 0){\r\n        showCount.textContent = currentCount;\r\n        stateMessage.textContent = text;\r\n        scoreCom.textContent = comScore;\r\n        scoreUser.textContent = userScore;\r\n        resultMessage.textContent = resultText;\r\n        if(turn === 'com'){\r\n            userShootBtn2.classList.add('off');\r\n            userShootBtn3.classList.add('off');\r\n            comShootBtn.classList.remove('off');\r\n        }if(turn === 'user'){\r\n            comShootBtn.classList.add('off');\r\n            userShootBtn2.classList.remove('off');\r\n            userShootBtn3.classList.remove('off');\r\n        }\r\n    }else if(currentCount === 0){\r\n        showCount.textContent = currentCount;\r\n        stateMessage.textContent = text;\r\n        userShootBtn2.classList.add('off');\r\n        userShootBtn3.classList.add('off');\r\n        compareScore(state);\r\n    }else{\r\n        stateMessage.textContent = text;\r\n        comShootBtn.classList.add('off');\r\n        userShootBtn2.classList.add('off');\r\n        userShootBtn3.classList.add('off');\r\n    }\r\n};\r\n\r\nsetCountButton();\r\nsetStartButton();\r\nsetShootButton();\r\nrender();\r\nstore.subscribe(render);\r\n\r\nexport default store;"]}